// Implementation file for parser generated by fsyacc
module Absparse
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "absparse.fsy"

// Copyright (c) Microsoft Corporation
//
// All rights reserved. 
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the ""Software""), to 
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

module E = ParseError

///
/// Location in a T2 file (either numerical or a name)
///
type parsedLoc =
    | NumLoc of int
    | NameLoc of string

let annotate = ref false
let incomplete_abstraction = ref false

let normalize_var (v : string) =
  if v.StartsWith Formula.instrumentation_prefix then
    Var.var ("_" + v)
  else
    Var.var v


# 49 "absparse.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | AF
  | AG
  | AW
  | AX
  | EF
  | EG
  | EU
  | EX
  | TO
  | FROM
  | CUTPOINT
  | START
  | ASSUME
  | ASSIGN
  | NONDET
  | SHADOW
  | AND_OP
  | OR_OP
  | EQ
  | GE
  | GT
  | LE
  | LT
  | NE
  | NOT
  | DIV
  | REM
  | STAR
  | PLUS
  | MINUS
  | LPAREN
  | RPAREN
  | EOF
  | SEMICOLON
  | COLON
  | COMMA
  | AT
  | Num of (bigint)
  | Id of (string)
  | Const of (string)
  | String of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_AF
    | TOKEN_AG
    | TOKEN_AW
    | TOKEN_AX
    | TOKEN_EF
    | TOKEN_EG
    | TOKEN_EU
    | TOKEN_EX
    | TOKEN_TO
    | TOKEN_FROM
    | TOKEN_CUTPOINT
    | TOKEN_START
    | TOKEN_ASSUME
    | TOKEN_ASSIGN
    | TOKEN_NONDET
    | TOKEN_SHADOW
    | TOKEN_AND_OP
    | TOKEN_OR_OP
    | TOKEN_EQ
    | TOKEN_GE
    | TOKEN_GT
    | TOKEN_LE
    | TOKEN_LT
    | TOKEN_NE
    | TOKEN_NOT
    | TOKEN_DIV
    | TOKEN_REM
    | TOKEN_STAR
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_SEMICOLON
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_AT
    | TOKEN_Num
    | TOKEN_Id
    | TOKEN_Const
    | TOKEN_String
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startFairness_constraint
    | NONTERM__startCTL_formula
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_blocks
    | NONTERM_block
    | NONTERM_shadows
    | NONTERM_shadow
    | NONTERM_commands
    | NONTERM_loc
    | NONTERM_command
    | NONTERM_term
    | NONTERM_formula
    | NONTERM_ATOM
    | NONTERM_CTL_formula
    | NONTERM_Fairness_constraint
    | NONTERM_num

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | AF  -> 0 
  | AG  -> 1 
  | AW  -> 2 
  | AX  -> 3 
  | EF  -> 4 
  | EG  -> 5 
  | EU  -> 6 
  | EX  -> 7 
  | TO  -> 8 
  | FROM  -> 9 
  | CUTPOINT  -> 10 
  | START  -> 11 
  | ASSUME  -> 12 
  | ASSIGN  -> 13 
  | NONDET  -> 14 
  | SHADOW  -> 15 
  | AND_OP  -> 16 
  | OR_OP  -> 17 
  | EQ  -> 18 
  | GE  -> 19 
  | GT  -> 20 
  | LE  -> 21 
  | LT  -> 22 
  | NE  -> 23 
  | NOT  -> 24 
  | DIV  -> 25 
  | REM  -> 26 
  | STAR  -> 27 
  | PLUS  -> 28 
  | MINUS  -> 29 
  | LPAREN  -> 30 
  | RPAREN  -> 31 
  | EOF  -> 32 
  | SEMICOLON  -> 33 
  | COLON  -> 34 
  | COMMA  -> 35 
  | AT  -> 36 
  | Num _ -> 37 
  | Id _ -> 38 
  | Const _ -> 39 
  | String _ -> 40 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_AF 
  | 1 -> TOKEN_AG 
  | 2 -> TOKEN_AW 
  | 3 -> TOKEN_AX 
  | 4 -> TOKEN_EF 
  | 5 -> TOKEN_EG 
  | 6 -> TOKEN_EU 
  | 7 -> TOKEN_EX 
  | 8 -> TOKEN_TO 
  | 9 -> TOKEN_FROM 
  | 10 -> TOKEN_CUTPOINT 
  | 11 -> TOKEN_START 
  | 12 -> TOKEN_ASSUME 
  | 13 -> TOKEN_ASSIGN 
  | 14 -> TOKEN_NONDET 
  | 15 -> TOKEN_SHADOW 
  | 16 -> TOKEN_AND_OP 
  | 17 -> TOKEN_OR_OP 
  | 18 -> TOKEN_EQ 
  | 19 -> TOKEN_GE 
  | 20 -> TOKEN_GT 
  | 21 -> TOKEN_LE 
  | 22 -> TOKEN_LT 
  | 23 -> TOKEN_NE 
  | 24 -> TOKEN_NOT 
  | 25 -> TOKEN_DIV 
  | 26 -> TOKEN_REM 
  | 27 -> TOKEN_STAR 
  | 28 -> TOKEN_PLUS 
  | 29 -> TOKEN_MINUS 
  | 30 -> TOKEN_LPAREN 
  | 31 -> TOKEN_RPAREN 
  | 32 -> TOKEN_EOF 
  | 33 -> TOKEN_SEMICOLON 
  | 34 -> TOKEN_COLON 
  | 35 -> TOKEN_COMMA 
  | 36 -> TOKEN_AT 
  | 37 -> TOKEN_Num 
  | 38 -> TOKEN_Id 
  | 39 -> TOKEN_Const 
  | 40 -> TOKEN_String 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startFairness_constraint 
    | 1 -> NONTERM__startCTL_formula 
    | 2 -> NONTERM__startprogram 
    | 3 -> NONTERM_program 
    | 4 -> NONTERM_program 
    | 5 -> NONTERM_blocks 
    | 6 -> NONTERM_blocks 
    | 7 -> NONTERM_block 
    | 8 -> NONTERM_shadows 
    | 9 -> NONTERM_shadows 
    | 10 -> NONTERM_shadow 
    | 11 -> NONTERM_commands 
    | 12 -> NONTERM_commands 
    | 13 -> NONTERM_loc 
    | 14 -> NONTERM_loc 
    | 15 -> NONTERM_command 
    | 16 -> NONTERM_command 
    | 17 -> NONTERM_command 
    | 18 -> NONTERM_command 
    | 19 -> NONTERM_command 
    | 20 -> NONTERM_command 
    | 21 -> NONTERM_term 
    | 22 -> NONTERM_term 
    | 23 -> NONTERM_term 
    | 24 -> NONTERM_term 
    | 25 -> NONTERM_term 
    | 26 -> NONTERM_term 
    | 27 -> NONTERM_term 
    | 28 -> NONTERM_term 
    | 29 -> NONTERM_term 
    | 30 -> NONTERM_term 
    | 31 -> NONTERM_formula 
    | 32 -> NONTERM_formula 
    | 33 -> NONTERM_formula 
    | 34 -> NONTERM_formula 
    | 35 -> NONTERM_formula 
    | 36 -> NONTERM_formula 
    | 37 -> NONTERM_formula 
    | 38 -> NONTERM_formula 
    | 39 -> NONTERM_formula 
    | 40 -> NONTERM_formula 
    | 41 -> NONTERM_ATOM 
    | 42 -> NONTERM_ATOM 
    | 43 -> NONTERM_ATOM 
    | 44 -> NONTERM_ATOM 
    | 45 -> NONTERM_ATOM 
    | 46 -> NONTERM_ATOM 
    | 47 -> NONTERM_CTL_formula 
    | 48 -> NONTERM_CTL_formula 
    | 49 -> NONTERM_CTL_formula 
    | 50 -> NONTERM_CTL_formula 
    | 51 -> NONTERM_CTL_formula 
    | 52 -> NONTERM_CTL_formula 
    | 53 -> NONTERM_CTL_formula 
    | 54 -> NONTERM_CTL_formula 
    | 55 -> NONTERM_CTL_formula 
    | 56 -> NONTERM_CTL_formula 
    | 57 -> NONTERM_CTL_formula 
    | 58 -> NONTERM_CTL_formula 
    | 59 -> NONTERM_Fairness_constraint 
    | 60 -> NONTERM_num 
    | 61 -> NONTERM_num 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | AF  -> "AF" 
  | AG  -> "AG" 
  | AW  -> "AW" 
  | AX  -> "AX" 
  | EF  -> "EF" 
  | EG  -> "EG" 
  | EU  -> "EU" 
  | EX  -> "EX" 
  | TO  -> "TO" 
  | FROM  -> "FROM" 
  | CUTPOINT  -> "CUTPOINT" 
  | START  -> "START" 
  | ASSUME  -> "ASSUME" 
  | ASSIGN  -> "ASSIGN" 
  | NONDET  -> "NONDET" 
  | SHADOW  -> "SHADOW" 
  | AND_OP  -> "AND_OP" 
  | OR_OP  -> "OR_OP" 
  | EQ  -> "EQ" 
  | GE  -> "GE" 
  | GT  -> "GT" 
  | LE  -> "LE" 
  | LT  -> "LT" 
  | NE  -> "NE" 
  | NOT  -> "NOT" 
  | DIV  -> "DIV" 
  | REM  -> "REM" 
  | STAR  -> "STAR" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EOF  -> "EOF" 
  | SEMICOLON  -> "SEMICOLON" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | AT  -> "AT" 
  | Num _ -> "Num" 
  | Id _ -> "Id" 
  | Const _ -> "Const" 
  | String _ -> "String" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | AF  -> (null : System.Object) 
  | AG  -> (null : System.Object) 
  | AW  -> (null : System.Object) 
  | AX  -> (null : System.Object) 
  | EF  -> (null : System.Object) 
  | EG  -> (null : System.Object) 
  | EU  -> (null : System.Object) 
  | EX  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | CUTPOINT  -> (null : System.Object) 
  | START  -> (null : System.Object) 
  | ASSUME  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | NONDET  -> (null : System.Object) 
  | SHADOW  -> (null : System.Object) 
  | AND_OP  -> (null : System.Object) 
  | OR_OP  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | REM  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | AT  -> (null : System.Object) 
  | Num _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Id _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | Const _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | String _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 0us; 65535us; 1us; 65535us; 4us; 5us; 3us; 65535us; 14us; 15us; 16us; 17us; 19us; 20us; 3us; 65535us; 14us; 18us; 16us; 18us; 19us; 18us; 3us; 65535us; 9us; 16us; 13us; 14us; 30us; 31us; 3us; 65535us; 9us; 29us; 13us; 29us; 30us; 29us; 2us; 65535us; 24us; 25us; 39us; 40us; 4us; 65535us; 7us; 8us; 11us; 12us; 22us; 23us; 27us; 28us; 2us; 65535us; 24us; 38us; 39us; 38us; 43us; 65535us; 2us; 90us; 50us; 51us; 53us; 56us; 59us; 60us; 62us; 65us; 68us; 69us; 71us; 74us; 72us; 75us; 73us; 76us; 97us; 78us; 98us; 79us; 99us; 80us; 100us; 81us; 101us; 82us; 105us; 84us; 106us; 85us; 107us; 86us; 108us; 87us; 109us; 88us; 110us; 89us; 111us; 83us; 118us; 83us; 119us; 83us; 121us; 91us; 122us; 92us; 123us; 93us; 124us; 94us; 125us; 95us; 126us; 96us; 141us; 90us; 142us; 90us; 144us; 90us; 147us; 90us; 150us; 90us; 153us; 90us; 156us; 90us; 159us; 90us; 162us; 90us; 165us; 90us; 168us; 90us; 171us; 90us; 174us; 83us; 175us; 83us; 8us; 65535us; 53us; 54us; 62us; 63us; 72us; 115us; 111us; 112us; 118us; 113us; 119us; 114us; 174us; 116us; 175us; 117us; 14us; 65535us; 2us; 127us; 73us; 127us; 141us; 127us; 142us; 127us; 144us; 127us; 147us; 127us; 150us; 127us; 153us; 127us; 156us; 127us; 159us; 127us; 162us; 127us; 165us; 127us; 168us; 127us; 171us; 127us; 14us; 65535us; 2us; 3us; 73us; 140us; 141us; 128us; 142us; 129us; 144us; 130us; 147us; 131us; 150us; 132us; 153us; 133us; 156us; 134us; 159us; 135us; 162us; 136us; 165us; 137us; 168us; 138us; 171us; 139us; 1us; 65535us; 0us; 1us; 0us; 65535us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 3us; 5us; 9us; 13us; 17us; 21us; 24us; 29us; 32us; 76us; 85us; 100us; 115us; 117us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 3us; 1us; 48us; 49us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 2us; 3us; 4us; 2us; 3us; 4us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 3us; 15us; 16us; 17us; 3us; 15us; 16us; 17us; 3us; 15us; 16us; 17us; 3us; 15us; 16us; 17us; 3us; 15us; 16us; 17us; 3us; 15us; 16us; 17us; 1us; 15us; 1us; 15us; 6us; 15us; 25us; 26us; 27us; 28us; 29us; 2us; 16us; 17us; 2us; 16us; 17us; 3us; 16us; 38us; 39us; 1us; 16us; 12us; 17us; 25us; 26us; 27us; 28us; 29us; 31us; 32us; 33us; 34us; 35us; 36us; 1us; 17us; 1us; 18us; 1us; 18us; 6us; 18us; 25us; 26us; 27us; 28us; 29us; 2us; 19us; 20us; 2us; 19us; 20us; 3us; 19us; 38us; 39us; 1us; 19us; 12us; 20us; 25us; 26us; 27us; 28us; 29us; 31us; 32us; 33us; 34us; 35us; 36us; 1us; 20us; 1us; 21us; 1us; 22us; 6us; 22us; 25us; 26us; 27us; 28us; 29us; 1us; 23us; 1us; 24us; 2us; 24us; 40us; 2us; 24us; 58us; 6us; 24us; 25us; 26us; 27us; 28us; 29us; 12us; 24us; 25us; 26us; 27us; 28us; 29us; 31us; 32us; 33us; 34us; 35us; 36us; 12us; 24us; 25us; 26us; 27us; 28us; 29us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 24us; 6us; 25us; 25us; 26us; 27us; 28us; 29us; 6us; 25us; 26us; 26us; 27us; 28us; 29us; 6us; 25us; 26us; 27us; 27us; 28us; 29us; 6us; 25us; 26us; 27us; 28us; 28us; 29us; 6us; 25us; 26us; 27us; 28us; 29us; 29us; 11us; 25us; 26us; 27us; 28us; 29us; 31us; 32us; 33us; 34us; 35us; 36us; 6us; 25us; 26us; 27us; 28us; 29us; 31us; 6us; 25us; 26us; 27us; 28us; 29us; 32us; 6us; 25us; 26us; 27us; 28us; 29us; 33us; 6us; 25us; 26us; 27us; 28us; 29us; 34us; 6us; 25us; 26us; 27us; 28us; 29us; 35us; 6us; 25us; 26us; 27us; 28us; 29us; 36us; 11us; 25us; 26us; 27us; 28us; 29us; 41us; 42us; 43us; 44us; 45us; 46us; 6us; 25us; 26us; 27us; 28us; 29us; 41us; 6us; 25us; 26us; 27us; 28us; 29us; 42us; 6us; 25us; 26us; 27us; 28us; 29us; 43us; 6us; 25us; 26us; 27us; 28us; 29us; 44us; 6us; 25us; 26us; 27us; 28us; 29us; 45us; 6us; 25us; 26us; 27us; 28us; 29us; 46us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 3us; 37us; 38us; 39us; 3us; 38us; 38us; 39us; 3us; 38us; 39us; 39us; 3us; 38us; 39us; 40us; 3us; 38us; 39us; 59us; 3us; 38us; 39us; 59us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 3us; 48us; 48us; 49us; 3us; 48us; 49us; 49us; 3us; 48us; 49us; 50us; 3us; 48us; 49us; 51us; 3us; 48us; 49us; 52us; 3us; 48us; 49us; 52us; 3us; 48us; 49us; 53us; 3us; 48us; 49us; 54us; 3us; 48us; 49us; 55us; 3us; 48us; 49us; 56us; 3us; 48us; 49us; 56us; 3us; 48us; 49us; 57us; 3us; 48us; 49us; 58us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 59us; 1us; 59us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 10us; 12us; 14us; 17us; 20us; 23us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 96us; 100us; 104us; 108us; 112us; 116us; 118us; 120us; 127us; 130us; 133us; 137us; 139us; 152us; 154us; 156us; 158us; 165us; 168us; 171us; 175us; 177us; 190us; 192us; 194us; 196us; 203us; 205us; 207us; 210us; 213us; 220us; 233us; 246us; 248us; 255us; 262us; 269us; 276us; 283us; 295us; 302us; 309us; 316us; 323us; 330us; 337us; 349us; 356us; 363us; 370us; 377us; 384us; 391us; 393us; 395us; 397us; 399us; 401us; 403us; 405us; 407us; 409us; 411us; 413us; 415us; 417us; 419us; 421us; 425us; 429us; 433us; 437us; 441us; 445us; 447us; 449us; 451us; 453us; 455us; 457us; 459us; 461us; 463us; 465us; 469us; 473us; 477us; 481us; 485us; 489us; 493us; 497us; 501us; 505us; 509us; 513us; 517us; 519us; 521us; 523us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 539us; 541us; 543us; 545us; 547us; 549us; 551us; 553us; 555us; 557us; 559us; 561us; 563us; 565us; 567us; 569us; 571us; 573us; 575us; 577us; 579us; 581us; 583us; 585us; 587us; |]
let _fsyacc_action_rows = 177
let _fsyacc_actionTableElements = [|1us; 32768us; 30us; 174us; 0us; 49152us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 2us; 49152us; 16us; 141us; 17us; 142us; 1us; 32768us; 11us; 6us; 0us; 49152us; 1us; 32768us; 34us; 7us; 2us; 32768us; 37us; 41us; 38us; 42us; 1us; 32768us; 33us; 9us; 2us; 16392us; 10us; 10us; 15us; 32us; 1us; 32768us; 34us; 11us; 2us; 32768us; 37us; 41us; 38us; 42us; 1us; 32768us; 33us; 13us; 1us; 16392us; 15us; 32us; 1us; 16389us; 9us; 21us; 0us; 16387us; 1us; 16389us; 9us; 21us; 0us; 16388us; 1us; 32768us; 33us; 19us; 1us; 16389us; 9us; 21us; 0us; 16390us; 1us; 32768us; 34us; 22us; 2us; 32768us; 37us; 41us; 38us; 42us; 1us; 32768us; 33us; 24us; 3us; 16395us; 12us; 61us; 36us; 43us; 38us; 58us; 1us; 32768us; 8us; 26us; 1us; 32768us; 34us; 27us; 2us; 32768us; 37us; 41us; 38us; 42us; 0us; 16391us; 1us; 32768us; 33us; 30us; 1us; 16392us; 15us; 32us; 0us; 16393us; 1us; 32768us; 30us; 33us; 1us; 32768us; 38us; 34us; 1us; 32768us; 35us; 35us; 1us; 32768us; 38us; 36us; 1us; 32768us; 31us; 37us; 0us; 16394us; 1us; 32768us; 33us; 39us; 3us; 16395us; 12us; 61us; 36us; 43us; 38us; 58us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 1us; 32768us; 30us; 44us; 1us; 32768us; 37us; 45us; 1us; 32768us; 35us; 46us; 1us; 32768us; 40us; 47us; 1us; 32768us; 31us; 48us; 2us; 32768us; 12us; 52us; 38us; 49us; 1us; 32768us; 13us; 50us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 16399us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 1us; 32768us; 30us; 53us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 3us; 32768us; 16us; 118us; 17us; 119us; 31us; 55us; 0us; 16400us; 12us; 32768us; 18us; 109us; 19us; 108us; 20us; 106us; 21us; 107us; 22us; 105us; 23us; 110us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 31us; 57us; 0us; 16401us; 1us; 32768us; 13us; 59us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 16402us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 1us; 32768us; 30us; 62us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 3us; 32768us; 16us; 118us; 17us; 119us; 31us; 64us; 0us; 16403us; 12us; 32768us; 18us; 109us; 19us; 108us; 20us; 106us; 21us; 107us; 22us; 105us; 23us; 110us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 31us; 66us; 0us; 16404us; 0us; 16405us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 0us; 16406us; 0us; 16407us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 6us; 32768us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 31us; 77us; 12us; 32768us; 18us; 109us; 19us; 108us; 20us; 106us; 21us; 107us; 22us; 105us; 23us; 110us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 31us; 77us; 12us; 32768us; 18us; 125us; 19us; 124us; 20us; 122us; 21us; 123us; 22us; 121us; 23us; 126us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 31us; 77us; 0us; 16408us; 3us; 16409us; 25us; 101us; 26us; 100us; 27us; 99us; 3us; 16410us; 25us; 101us; 26us; 100us; 27us; 99us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 11us; 32768us; 18us; 109us; 19us; 108us; 20us; 106us; 21us; 107us; 22us; 105us; 23us; 110us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16415us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16416us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16417us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16418us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16419us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16420us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 11us; 32768us; 18us; 125us; 19us; 124us; 20us; 122us; 21us; 123us; 22us; 121us; 23us; 126us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16425us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16426us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16427us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16428us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16429us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 16430us; 25us; 101us; 26us; 100us; 27us; 99us; 28us; 97us; 29us; 98us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 1us; 32768us; 30us; 103us; 1us; 32768us; 31us; 104us; 0us; 16414us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 2us; 16421us; 16us; 118us; 17us; 119us; 0us; 16422us; 1us; 16423us; 16us; 118us; 3us; 32768us; 16us; 118us; 17us; 119us; 31us; 120us; 3us; 32768us; 16us; 118us; 17us; 119us; 35us; 175us; 3us; 32768us; 16us; 118us; 17us; 119us; 31us; 176us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 0us; 16424us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 5us; 32768us; 14us; 102us; 29us; 68us; 30us; 71us; 37us; 67us; 38us; 70us; 0us; 16431us; 0us; 16432us; 1us; 16433us; 16us; 141us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 145us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 148us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 151us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 154us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 157us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 160us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 163us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 166us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 169us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 172us; 3us; 32768us; 16us; 141us; 17us; 142us; 31us; 173us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 1us; 32768us; 30us; 144us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16434us; 1us; 32768us; 30us; 147us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16435us; 1us; 32768us; 30us; 150us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 1us; 32768us; 35us; 152us; 1us; 32768us; 30us; 153us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16436us; 1us; 32768us; 30us; 156us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16437us; 1us; 32768us; 30us; 159us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16438us; 1us; 32768us; 30us; 162us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16439us; 1us; 32768us; 30us; 165us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 1us; 32768us; 35us; 167us; 1us; 32768us; 30us; 168us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16440us; 1us; 32768us; 30us; 171us; 13us; 32768us; 0us; 143us; 1us; 146us; 2us; 149us; 3us; 155us; 4us; 158us; 5us; 161us; 6us; 164us; 7us; 170us; 14us; 102us; 29us; 68us; 30us; 73us; 37us; 67us; 38us; 70us; 0us; 16441us; 0us; 16442us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 6us; 32768us; 14us; 102us; 24us; 111us; 29us; 68us; 30us; 72us; 37us; 67us; 38us; 70us; 0us; 16443us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 17us; 20us; 22us; 23us; 25us; 28us; 30us; 33us; 35us; 38us; 40us; 42us; 44us; 45us; 47us; 48us; 50us; 52us; 53us; 55us; 58us; 60us; 64us; 66us; 68us; 71us; 72us; 74us; 76us; 77us; 79us; 81us; 83us; 85us; 87us; 88us; 90us; 94us; 95us; 96us; 97us; 99us; 101us; 103us; 105us; 107us; 110us; 112us; 118us; 124us; 126us; 133us; 137us; 138us; 151us; 152us; 154us; 160us; 166us; 168us; 175us; 179us; 180us; 193us; 194us; 195us; 201us; 202us; 203us; 209us; 216us; 230us; 237us; 250us; 263us; 264us; 268us; 272us; 273us; 274us; 275us; 287us; 293us; 299us; 305us; 311us; 317us; 323us; 335us; 341us; 347us; 353us; 359us; 365us; 371us; 377us; 383us; 389us; 395us; 401us; 403us; 405us; 406us; 412us; 418us; 424us; 430us; 436us; 442us; 449us; 452us; 453us; 455us; 459us; 463us; 467us; 474us; 481us; 482us; 488us; 494us; 500us; 506us; 512us; 518us; 519us; 520us; 522us; 526us; 530us; 534us; 538us; 542us; 546us; 550us; 554us; 558us; 562us; 566us; 580us; 594us; 596us; 610us; 611us; 613us; 627us; 628us; 630us; 644us; 646us; 648us; 662us; 663us; 665us; 679us; 680us; 682us; 696us; 697us; 699us; 713us; 714us; 716us; 730us; 732us; 734us; 748us; 749us; 751us; 765us; 766us; 767us; 774us; 781us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 10us; 6us; 0us; 3us; 8us; 0us; 3us; 6us; 0us; 3us; 1us; 1us; 9us; 10us; 10us; 3us; 4us; 4us; 1us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 3us; 4us; 4us; 8us; 4us; 4us; 4us; 8us; 4us; 3us; 5us; 1us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 16us; 16us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 65535us; 65535us; 49152us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 16388us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 16396us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 16404us; 16405us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16431us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16434us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 16437us; 65535us; 65535us; 16438us; 65535us; 65535us; 16439us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 65535us; 65535us; 16441us; 16442us; 65535us; 65535us; 16443us; |]
let _fsyacc_reductions ()  =    [| 
# 421 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula * Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startFairness_constraint));
# 430 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startCTL_formula));
# 439 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : parsedLoc * parsedLoc * (parsedLoc * Programs.command list * parsedLoc) list * (Var.var * Var.var) list * bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprogram));
# 448 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : parsedLoc)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : parsedLoc)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'shadows)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : (parsedLoc * Programs.command list * parsedLoc) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "absparse.fsy"
                               (_3,_7,_10,_9,!incomplete_abstraction) 
                   )
# 84 "absparse.fsy"
                 : parsedLoc * parsedLoc * (parsedLoc * Programs.command list * parsedLoc) list * (Var.var * Var.var) list * bool));
# 462 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : parsedLoc)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'shadows)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : (parsedLoc * Programs.command list * parsedLoc) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "absparse.fsy"
                               (_3,NumLoc -1,_6,_5,!incomplete_abstraction) 
                   )
# 86 "absparse.fsy"
                 : parsedLoc * parsedLoc * (parsedLoc * Programs.command list * parsedLoc) list * (Var.var * Var.var) list * bool));
# 475 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "absparse.fsy"
                                 [] 
                   )
# 90 "absparse.fsy"
                 : (parsedLoc * Programs.command list * parsedLoc) list));
# 485 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : parsedLoc * Programs.command list * parsedLoc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : (parsedLoc * Programs.command list * parsedLoc) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "absparse.fsy"
                                 _1::_3 
                   )
# 92 "absparse.fsy"
                 : (parsedLoc * Programs.command list * parsedLoc) list));
# 497 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : parsedLoc)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Programs.command list)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : parsedLoc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "absparse.fsy"
                               (_3,_5,_8) 
                   )
# 95 "absparse.fsy"
                 : parsedLoc * Programs.command list * parsedLoc));
# 510 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "absparse.fsy"
                                 [] 
                   )
# 98 "absparse.fsy"
                 : 'shadows));
# 520 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'shadow)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'shadows)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "absparse.fsy"
                                 _1::_3 
                   )
# 100 "absparse.fsy"
                 : 'shadows));
# 532 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "absparse.fsy"
                               (normalize_var _3, normalize_var _5) 
                   )
# 103 "absparse.fsy"
                 : 'shadow));
# 544 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "absparse.fsy"
                                 [] 
                   )
# 106 "absparse.fsy"
                 : Programs.command list));
# 554 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Programs.command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Programs.command list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "absparse.fsy"
                                 _1::_3 
                   )
# 108 "absparse.fsy"
                 : Programs.command list));
# 566 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "absparse.fsy"
                         NumLoc(int _1) 
                   )
# 112 "absparse.fsy"
                 : parsedLoc));
# 577 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "absparse.fsy"
                         NameLoc(_1) 
                   )
# 114 "absparse.fsy"
                 : parsedLoc));
# 588 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "absparse.fsy"
                                   if Term.contains_nondet _9 then 
                                       Programs.Assign(Some(int _3,_5),normalize_var (_7),Term.Nondet)
                                   else 
                                       Programs.Assign(Some(int _3,_5),normalize_var (_7),_9) 
                                 
                   )
# 118 "absparse.fsy"
                 : Programs.command));
# 606 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "absparse.fsy"
                                   Programs.Assume(Some(int _3,_5),_9) 
                   )
# 124 "absparse.fsy"
                 : Programs.command));
# 619 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "absparse.fsy"
                                   if Term.contains_nondet _9 then
                                     Programs.Assume(Some(int _3,_5),Formula.Not(Formula.Eq(Term.Nondet,Term.constant 0))) 
                                   else
                                     Programs.Assume(Some(int _3,_5),Formula.Not(Formula.Eq(_9,Term.constant 0))) 
                                 
                   )
# 126 "absparse.fsy"
                 : Programs.command));
# 636 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "absparse.fsy"
                                   if !annotate then
                                       Programs.Assign(Some(E.getLine(),E.getFilename()),normalize_var (_1),_3) 
                                   else 
                                       Programs.Assign(None,normalize_var (_1),_3) 
                                 
                   )
# 132 "absparse.fsy"
                 : Programs.command));
# 652 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "absparse.fsy"
                                   let pos = if !annotate then Some(E.getLine(),E.getFilename()) 
                                             else None
                                   in Programs.Assume(pos,_3) 
                                 
                   )
# 138 "absparse.fsy"
                 : Programs.command));
# 666 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "absparse.fsy"
                                   let pos = if !annotate then Some(E.getLine(),E.getFilename()) 
                                             else None
                                   in Programs.Assume(pos,Formula.Not(Formula.Eq(_3,Term.constant 0))) 
                                 
                   )
# 143 "absparse.fsy"
                 : Programs.command));
# 680 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "absparse.fsy"
                                                       Term.Const(_1) 
                   )
# 152 "absparse.fsy"
                 : Term.term));
# 691 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "absparse.fsy"
                                                          Term.Sub(Term.constant 0,_2) 
                   )
# 153 "absparse.fsy"
                 : Term.term));
# 702 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "absparse.fsy"
                                                       Term.Var(normalize_var  _1) 
                   )
# 154 "absparse.fsy"
                 : Term.term));
# 713 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "absparse.fsy"
                                                       _2 
                   )
# 155 "absparse.fsy"
                 : Term.term));
# 724 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "absparse.fsy"
                                                       Term.Add(_1,_3) 
                   )
# 156 "absparse.fsy"
                 : Term.term));
# 736 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "absparse.fsy"
                                                   Term.Sub(_1,_3) 
                   )
# 157 "absparse.fsy"
                 : Term.term));
# 748 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "absparse.fsy"
                                                   Term.Mul(_1,_3) 
                   )
# 158 "absparse.fsy"
                 : Term.term));
# 760 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "absparse.fsy"
                                                   incomplete_abstraction := true; Term.Nondet 
                   )
# 159 "absparse.fsy"
                 : Term.term));
# 772 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "absparse.fsy"
                                                   incomplete_abstraction := true; Term.Nondet 
                   )
# 160 "absparse.fsy"
                 : Term.term));
# 784 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "absparse.fsy"
                                                   Term.Nondet 
                   )
# 161 "absparse.fsy"
                 : Term.term));
# 794 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "absparse.fsy"
                                          Formula.Lt(_1,_3) 
                   )
# 167 "absparse.fsy"
                 : Formula.formula));
# 806 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "absparse.fsy"
                                          Formula.Gt(_1,_3) 
                   )
# 168 "absparse.fsy"
                 : Formula.formula));
# 818 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "absparse.fsy"
                                          Formula.Le(_1,_3) 
                   )
# 169 "absparse.fsy"
                 : Formula.formula));
# 830 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "absparse.fsy"
                                          Formula.Ge(_1,_3) 
                   )
# 170 "absparse.fsy"
                 : Formula.formula));
# 842 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "absparse.fsy"
                                          Formula.Eq(_1,_3) 
                   )
# 171 "absparse.fsy"
                 : Formula.formula));
# 854 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "absparse.fsy"
                                          Formula.Not(Formula.Eq(_1,_3)) 
                   )
# 172 "absparse.fsy"
                 : Formula.formula));
# 866 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "absparse.fsy"
                                        Formula.Not _2
                   )
# 173 "absparse.fsy"
                 : Formula.formula));
# 877 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "absparse.fsy"
                                                    Formula.And(_1,_3) 
                   )
# 174 "absparse.fsy"
                 : Formula.formula));
# 889 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "absparse.fsy"
                                                       Formula.Or(_1,_3) 
                   )
# 175 "absparse.fsy"
                 : Formula.formula));
# 901 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "absparse.fsy"
                                                   _2 
                   )
# 176 "absparse.fsy"
                 : Formula.formula));
# 912 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "absparse.fsy"
                                       Formula.Lt(_1,_3) 
                   )
# 180 "absparse.fsy"
                 : 'ATOM));
# 924 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "absparse.fsy"
                                          Formula.Gt(_1,_3) 
                   )
# 181 "absparse.fsy"
                 : 'ATOM));
# 936 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "absparse.fsy"
                                          Formula.Le(_1,_3) 
                   )
# 182 "absparse.fsy"
                 : 'ATOM));
# 948 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "absparse.fsy"
                                          Formula.Ge(_1,_3) 
                   )
# 183 "absparse.fsy"
                 : 'ATOM));
# 960 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "absparse.fsy"
                                          Formula.Eq(_1,_3) 
                   )
# 184 "absparse.fsy"
                 : 'ATOM));
# 972 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Term.term)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "absparse.fsy"
                                          Formula.Not(Formula.Eq(_1,_3)) 
                   )
# 185 "absparse.fsy"
                 : 'ATOM));
# 984 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ATOM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "absparse.fsy"
                               CTL.CTL_Formula.Atom _1
                   )
# 189 "absparse.fsy"
                 : CTL.CTL_Formula));
# 995 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "absparse.fsy"
                                                         CTL.CTL_Formula.CTL_And(_1, _3) 
                   )
# 190 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1007 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "absparse.fsy"
                                                           CTL.CTL_Formula.CTL_Or(_1, _3) 
                   )
# 191 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1019 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "absparse.fsy"
                                                        CTL.CTL_Formula.AF _3
                   )
# 192 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1030 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "absparse.fsy"
                                                          CTL.CTL_Formula.AG _3
                   )
# 193 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1041 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "absparse.fsy"
                                                                                       CTL.CTL_Formula.AW(_3, _7) 
                   )
# 194 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1053 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "absparse.fsy"
                                                          CTL.CTL_Formula.AX _3
                   )
# 195 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1064 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "absparse.fsy"
                                                        CTL.CTL_Formula.EF _3
                   )
# 196 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1075 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "absparse.fsy"
                                                          CTL.CTL_Formula.EG _3
                   )
# 197 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1086 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "absparse.fsy"
                                                                                       CTL.CTL_Formula.EU(_3, _7) 
                   )
# 198 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1098 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "absparse.fsy"
                                                          CTL.CTL_Formula.EX _3
                   )
# 199 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1109 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : CTL.CTL_Formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "absparse.fsy"
                                                    _2 
                   )
# 200 "absparse.fsy"
                 : CTL.CTL_Formula));
# 1120 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Formula.formula)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "absparse.fsy"
                                                              (_2, _4) 
                   )
# 204 "absparse.fsy"
                 : Formula.formula * Formula.formula));
# 1132 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "absparse.fsy"
                                 _1 
                   )
# 208 "absparse.fsy"
                 : bigint));
# 1143 "absparse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : bigint)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "absparse.fsy"
                                            -_2 
                   )
# 209 "absparse.fsy"
                 : bigint));
|]
# 1155 "absparse.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Fairness_constraint lexer lexbuf : Formula.formula * Formula.formula =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let CTL_formula lexer lexbuf : CTL.CTL_Formula =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
let program lexer lexbuf : parsedLoc * parsedLoc * (parsedLoc * Programs.command list * parsedLoc) list * (Var.var * Var.var) list * bool =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 4))
