{"name":"T2","tagline":"T2 Temporal Prover","body":"# T2 Temporal Prover\r\nThe T2 research project aims to build a high-performance automatic program\r\nverification tool for proving temporal properties of programs, such as safety,\r\ntermination, or properties specified in the logic CTL.\r\nT2 replaces the original TERMINATOR project, which was started in 2005.\r\nSee the authors named in the list of publications for an idea of who has\r\ncontributed to T2 and TERMINATOR over the years.\r\n\r\n## Building T2\r\n\r\n### Windows\r\nTo build T2, we recommend using Visual Studio (2013 or later), but you can\r\nalso follow the Mono instructions provided below. In VS, the F# Power\r\nPack is managed through NuGet in Visual Studio and does not need to be\r\ndownloaded manually.\r\n\r\n### Using Mono (for Linux and MacOS)\r\nTo build T2, you first need to build the .NET bindings of z3 using Mono.\r\nFor this, get thr z3 sources (4.3.2 is known to work) from\r\n   http://z3.codeplex.com/\r\n\r\nTo install needed .NET libraries, you will need NuGet, which you can\r\nobtain from http://nuget.org/nuget.exe.\r\n\r\nLet `$NUGET` be the path to your nuget.exe download, `$Z3DIR` be the directory\r\nwith Z3 sources, `$T2DIR` be the T2 source directory (e.g., set them by\r\n`export Z3DIR=/path/to/z3/`) and follow these steps:\r\n\r\n1. Install software needed for the build process:\r\n    * `g++`\r\n    * `python`\r\n    * Mono for .NET 4.0\r\n    * `xbuild`\r\n    * `fsharp`\r\n\r\n    On a Debian (>> squeezy) or Ubuntu (>= 14.04 LTS) system, this suffices:\r\n    ```\r\n      $ sudo apt-get install build-essential python mono-complete mono-xbuild fsharp\r\n    ```\r\n\r\n    On OS X, install the Mono MDK for Mac OS from\r\n       http://www.mono-project.com/download/\r\n    and install the `XCode` development tools (e.g., by executing `gcc` in\r\n    a Terminal -- if it's not there yet, Mac OS will offer to install `XCode`).\r\n\r\n2. Build z3.\r\n    On Linux, this suffices:\r\n    ```\r\n      $ pushd \"$Z3DIR\"\r\n      $ ./configure\r\n      $ pushd \"$Z3DIR/build\"\r\n      $ make\r\n      $ popd && popd\r\n    ```\r\n\r\n    On OS X, you need to enforce a 32bit build (for compatibility with Mono):\r\n    ```\r\n      $ pushd \"$Z3DIR\"\r\n      $ ./configure\r\n      $ pushd \"$Z3DIR/build\"\r\n      $ perl -i -pe 's/-D_AMD64_/-arch i386/; s/LINK_EXTRA_FLAGS=/$&-arch i386 /' config.mk\r\n      $ make\r\n      $ popd && popd\r\n    ```\r\n\r\n3. Build the .NET bindings for z3:\r\n    ```\r\n      $ pushd \"$Z3DIR/src/api/dotnet/\"\r\n      $ echo -e '<configuration>\\n <dllmap dll=\"libz3.dll\" target=\"libz3.dylib\" os=\"osx\"/>\\n <dllmap dll=\"libz3.so\" target=\"libz3.dylib\" os=\"linux\"/>\\n</configuration>\\n' > Microsoft.Z3.config\r\n      $ xbuild Microsoft.Z3.csproj\r\n      $ popd\r\n    ```\r\n\r\n4. Update z3 and its .NET bindings in the T2 source tree:\r\n    ```\r\n      $ cp \"$Z3DIR/src/api/dotnet/obj/Debug/Microsoft.Z3.*\" \"$T2DIR/src/\"\r\n      $ cp \"$Z3DIR/build/libz3.*\" \"$T2DIR/src/\"\r\n    ```\r\n\r\n5. Get required packages via NuGet (may need to import certificates first):\r\n    ```\r\n      $ mozroots --import --sync\r\n      $ pushd \"$T2DIR/src\" && mono $NUGET restore && popd\r\n    ```\r\n\r\n6. Build T2, in Debug mode:\r\n    ```\r\n      $ pushd \"$T2DIR/src\" && xbuild && popd\r\n    ```\r\n   In Release configuration:\r\n    ```\r\n      $ pushd \"$T2DIR/src\" && xbuild /property:Configuration=Release && popd\r\n    ```\r\n\r\n7. Run T2 as follows (replace `Debug` by `Release` for the release build)\r\n    ```\r\n      $ mono \"$T2DIR/src/bin/Debug/T2.exe\"\r\n    ```\r\n    For example, to execute the testsuite:\r\n    ```\r\n      $ pushd \"$T2DIR/test\" && mono \"$T2DIR/src/bin/Debug/T2.exe\" -tests\r\n    ```\r\n\r\n## Running T2\r\n\r\nT2 is run from the command line, and the following command line arguments are\r\nused to define the proof goal:\r\n\r\n * `-input_t2` _string_: \r\n    Path of the input file in T2 syntax. For examples, look at `test/*.t2`.\r\n\r\n * `-termination`:\r\n    Try to prove (non)termination.\r\n\r\n * `-safety` _int_: \r\n    Try to prove non-reachability of location _int_.\r\n\r\n * `-ctl` _CTL_Formula_: \r\n    Try to prove that _CTL_Formula_ holds for the program. \r\n    The formula format is as follows:\r\n      - Path and temporal quantifiers are enclosed in square brackets,\r\n        e.g. `[AG]`, `[EF]`, and `[AW]`.\r\n      - Subformulas following quantifiers have to be enclosed in\r\n        parentheses, e.g. `[AG](x > 0)` and `[EF]([AG](y < x))`.\r\n    For more CTL formula examples, see `programTests.fs`, or the parser\r\n    definition in `absparse.mly`.\r\n\r\n * `-fairness` _Fairness_Condition_:\r\n    Try to prove termination/a CTL formula under _Fairness_Condition_.\r\n    The format of _Fairness_Condition_ is `(P, Q)`, where a \r\n    computation is unfair if an infinite number of states in it\r\n    satisfy `P`, whereas `Q` is only satisfied finitely often.\r\n    An example is `(P == 1, Q == 1)`, and more examples can be\r\n    found in `programTests.fs`.\r\n\r\nCommonly used options that modify T2 output behaviour:\r\n * `-timeout` _int_\r\n    Set timeout (in seconds).\r\n\r\n * `-print_proof`: \r\n    Print an explanation of the result.\r\n\r\n * `-log`:\r\n    Turn on verbose logging. This will print a lot of output, and may\r\n    be hard to understand for non-developers.\r\n\r\nTypical calls of T2 on Windows, with output, look like this:\r\n```\r\n $ src/bin/Debug/T2.exe -input_t2 test/testsuite/small02.t2 -safety 10000 -timeout 42\r\n Safety proof succeeded\r\n```\r\n\r\n```\r\n $ src/bin/Debug/T2.exe -input_t2 test/testsuite/small01.t2 -termination -print_proof\r\n Termination proof succeeded\r\n Used the following cutpoint-specific lexicographic rank functions:\r\n   * For cutpoint 7, used the following rank functions/bounds (in descending priority order):\r\n     - RF x, bound 2\r\n```\r\n\r\n```\r\n $ src/bin/Debug/T2.exe -input_t2 test/testsuite/heidy1.t2 -CTL \"[AG] (x_1 >= y_1)\"\r\n Temporal proof succeeded\r\n```\r\n\r\n```\r\n $ src/bin/Debug/T2.exe -input_t2 test/bakery.t2 -CTL \"[AG](NONCRITICAL <= 0 || ([AF](CRITICAL > 0)))\" -fairness \"(P == 1, Q == 1)\"\r\n Temporal proof succeeded\r\n```\r\n\r\nNote that T2 creates \"defect\" files when proofs fail and logging is enabled.\r\nA defect.tt file can be viewed with sdvdefect.exe (which comes with the SDV\r\ndistribution).\r\n\r\n\r\n## Publications\r\n * _Fairness for Infinite-State Systems_.\r\n    Byron Cook, Heidy Khlaaf, Nir Piterman.\r\n    TACAS'15.\r\n * _Faster Temporal Reasoning for Infinite-State Programs_.\r\n    Byron Cook, Heidy Khlaaf, Nir Piterman.\r\n    FMCAD'14.\r\n * _Better termination proving through cooperation_.\r\n    Marc Brockschmidt, Byron Cook, Carsten Fuhs.\r\n    CAV'13.\r\n * _Reasoning about nondeterminism in programs_.\r\n    Byron Cook and Eric Koskinen.\r\n    PLDI'13.\r\n * _Ramsey vs. lexicographic termination proving_.\r\n    Byron Cook, Abigail See, and Florian Zuleger.\r\n    TACAS'13.\r\n * _Ranking function synthesis for bit-vector relations_.\r\n    Byron Cook, Daniel Kroening, Philipp Rummer, Christoph Wintersteiger.\r\n    Formal Methods in System Design, 2013.\r\n * _Proving termination of nonlinear command sequences_.\r\n    Domagoj Babic, Byron Cook, Alan J. Hu, Zvonimir Rakamaric.\r\n    Formal Aspects of Computing (special issue from SEFM), 2013.\r\n * _Temporal property verification as a program analysis task_ (extended version).\r\n    Byron Cook, Eric Koskinen, Moshe Vardi.\r\n    Formal Methods in System Design (special issue from CAV), 2012.\r\n * _Proving program termination_ (Review article).\r\n    Byron Cook, Andreas Podelski, Andrey Rybalchenko.\r\n    Communications of the ACM, Volume 54 Issue 5, May 2011.\r\n * _Temporal property verification as a program analysis task_.\r\n    Byron Cook, Eric Koskinen, Moshe Vardi.\r\n    CAV'11.\r\n * _Making prophecies with decision predicates_.\r\n    Byron Cook and Eric Koskinen.\r\n    POPL'11.\r\n * _Proving stabilization of biological systems_.\r\n    Byron Cook, Jasmin Fisher, Elzbieta Krepska, Nir Piterman.\r\n    VMCAI'11.\r\n * _Ranking function synthesis for bit-vector relations_.\r\n    Byron Cook, Daniel Kroening, Philipp Rummer, and Christoph Wintersteiger.\r\n    TACAS'10.\r\n * _Summarization for termination: No return!_.\r\n    Byron Cook, Andreas Podelski, Andrey Rybalchenko.\r\n    FMSD (2009) 35:369-387.\r\n * _Proving that non-blocking algorithms don't block_.\r\n    Alexey Gotsman, Byron Cook, Matthew Parkinson, and Viktor Vafeiadis.\r\n    POPL'09.\r\n * _Proving conditional termination_.\r\n    Byron Cook, Sumit Gulwani, Tal Lev-Ami, Andrey Rybalchenko, and Mooly Sagiv.\r\n    CAV'08.\r\n * _Ranking abstractions_.\r\n    Aziem Chawdhary, Byron Cook, Sumit Gulwani, Mooly Sagiv, and Hongseok Yang.\r\n    ESOP'08.\r\n * _Proving thread termination_.\r\n    Byron Cook, Andreas Podelski, and Andrey Rybalchenko.\r\n    PLDI'07.\r\n * _Proving termination by divergence_.\r\n    Domagoj Babic, Byron Cook, Alan Hu, Zvonimir Rakamaric.\r\n    SEFM'07.\r\n * _Arithmetic strengthening for shape analysis_.\r\n    Stephen Magill, Josh Berdine, Edmund Clarke, and Byron Cook.\r\n    SAS'07.\r\n * _Proving that programs eventually do something good_.\r\n    Byron Cook, Alexey Gotsman, Andreas Podelski, Andrey Rybalchenko, and Moshe Vardi.\r\n    POPL'07.\r\n * _Variance analyses from invariance analyses_.\r\n    Josh Berdine, Aziem Chawdhary, Byron Cook, Dino Distefano, and Peter O'Hearn.\r\n    POPL'07.\r\n * _Automatic termination proofs for programs with shape-shifting heaps_.\r\n    Josh Berdine, Byron Cook, Dino Distefano, and Peter O'Hearn.\r\n    CAV'06.\r\n * _Terminator: Beyond safety_ (short tool description paper).\r\n    Byron Cook, Andreas Podelski, and Andrey Rybalchenko.\r\n    CAV'06.\r\n * _Termination proofs for systems code_.\r\n    Byron Cook, Andreas Podelski, and Andrey Rybalchenko.\r\n    PLDI'06.\r\n * _Abstraction refinement for termination_.\r\n    Byron Cook, Andreas Podelski, Andrey Rybalchenko.\r\n    SAS'05.\r\n\r\n## Press\r\n   * [Why the blue screen of death no longer plagues Windows users](http://www.zdnet.com/why-the-blue-screen-of-death-no-longer-plagues-windows-users-7000021327/)\r\n     ZDNet\r\n     By Nick Heath\r\n     September, 2013\r\n   * [Geek of the week](http://www.simple-talk.com/opinion/geek-of-the-week/dr-byron-cook-geek-of-the-week/)\r\n     Simple Talk\r\n     By Richard Morris\r\n     September, 2010\r\n   * [A Sign of the Times](http://www.wired.com/magazine/2009/11/st_goodsigns/)\r\n     Wired\r\n     By Cameron Bird\r\n     December, 2009\r\n   * [A Good Sign](http://www.sciencemag.org/cgi/content/summary/325/5939/391)\r\n     Science\r\n     By Angela Saini\r\n     July, 2009\r\n   * [Inside Terminator](http://channel9.msdn.com/ShowPost.aspx?PostID=342240#342240)\r\n     [channel9.msdn.com](http://channel9.msdn.com/) \r\n     By Charles Torre \r\n     September, 2007\r\n   * [Using Proofs to Catch System Hangs Before They're Born](http://channel9.msdn.com/showpost.aspx?postid=324448)\r\n     [channel9.msdn.com](http://channel9.msdn.com/) \r\n     By Charles Torre \r\n     July, 2007\r\n   * [Send in the Terminator](http://www.sciam.com/article.cfm?articleID=D3EBDC43-E7F2-99DF-3DF7AF0D38DBCA84&amp;chanID=sa001) \r\n     By Gary Stix \r\n     [Scientific American](http://www.sciam.com/) \r\n     December, 2006\r\n   * [Testers aim to kill off dreaded blue screens](http://www.ft.com/cms/s/b1a89cfc-7a00-11db-8d70-0000779e2340,Authorised=false.html?_i_location=http%3A%2F%2Fwww.ft.com%2Fcms%2Fs%2Fb1a89cfc-7a00-11db-8d70-0000779e2340.html&amp;_i_referer=)\r\n     By Mary Branscombe\r\n     [Financial Times](http://www.ft.com/)\r\n     November, 2007","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}