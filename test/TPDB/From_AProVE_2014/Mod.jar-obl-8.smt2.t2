START: 3;

FROM: 0;
 arg1P := nondet();
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume(arg2P > -1 && arg2 > 1 && arg1P > -1 && arg1 > 0);
 arg1 := arg1P;
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 1;

FROM: 1;
 arg1P := nondet();
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume(arg2 <= arg1 && arg2 > 0 && arg2 = arg1P && arg1 = arg2P && arg2 = arg3P && arg2 = arg4P);
 arg1 := arg1P;
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 2;

FROM: 2;
 arg1P := nondet();
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume(0 = arg3 && 0 = arg4 && arg2 = arg1P && arg1 = arg2P);
 arg1 := arg1P;
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 1;

FROM: 2;
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume(arg3 < 0 && arg3 < 1 && arg3 = arg4 && arg2+1 = arg2P && arg3+1 = arg3P && arg3+1 = arg4P);
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 2;

FROM: 2;
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume(arg3 > 0 && arg3 < 1 && arg3 = arg4 && arg2+1 = arg2P && arg3+1 = arg3P && arg3+1 = arg4P);
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 2;

FROM: 2;
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume(arg3 > 0 && arg3 = arg4 && arg2-1 = arg2P && arg3-1 = arg3P && arg3-1 = arg4P);
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 2;

FROM: 3;
 arg1P := nondet();
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume((0 <= 0));
 arg1 := arg1P;
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 0;

