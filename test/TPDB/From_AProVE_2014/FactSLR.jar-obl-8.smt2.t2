START: 2;

FROM: 0;
 arg1P := nondet();
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume(arg1 > 0 && 0 = arg2 && -1 = arg1P && 0 = arg2P && 0 = arg3P && 0 = arg4P);
 arg1 := arg1P;
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 1;

FROM: 0;
 arg1P := nondet();
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 x3 := nondet();
 assume(x3 > -1 && arg2 > 0 && arg1 > 0 && 3*x3-1 = arg1P && 3*x3 = arg2P && arg2 = arg3P && 1 = arg4P);
 arg1 := arg1P;
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 1;

FROM: 1;
 arg1P := nondet();
 arg2P := nondet();
 assume(arg2 > 0 && arg4 >= arg3 && arg3 > -1 && arg1-1 = arg1P && arg1 = arg2P);
 arg1 := arg1P;
 arg2 := arg2P;
TO: 1;

FROM: 1;
 arg1P := nondet();
 arg2P := nondet();
 arg4P := nondet();
 assume(arg2 > 0 && arg3 > -1 && arg4 > -1 && arg4 < arg3 && arg1-1 = arg1P && arg1 = arg2P && arg4+1 = arg4P);
 arg1 := arg1P;
 arg2 := arg2P;
 arg4 := arg4P;
TO: 1;

FROM: 2;
 arg1P := nondet();
 arg2P := nondet();
 arg3P := nondet();
 arg4P := nondet();
 assume((0 <= 0));
 arg1 := arg1P;
 arg2 := arg2P;
 arg3 := arg3P;
 arg4 := arg4P;
TO: 0;

